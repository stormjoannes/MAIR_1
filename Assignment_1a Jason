from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

# Process files: read and classify line by line
def process_file(filepath):
    labeled_lines = []
    try:
        with open(filepath, 'r', encoding='utf-8') as file:
            lines = file.readlines()

        for line in lines:
            # Ensure that line contains both label and sentence
            if len(line.strip().split(" ", 1)) == 2:
                # Extract original label and sentence
                original_label, sentence = line.split(" ", 1)
                original_label = original_label.strip()
                sentence = sentence.strip()

                # Store original label and sentence
                labeled_lines.append((original_label, sentence))
            else:
                print(f"Line skipped due to incorrect format: {line.strip()}")

    except FileNotFoundError:
        print(f"File not found: {filepath}")
    except Exception as e:
        print(f"Error while processing file: {e}")

    return labeled_lines

# Example: Process files and calculate accuracy
filepath = "dialog_acts.dat"  # File path containing original labels and sentences
labeled_output = process_file(filepath)

# Check if labeled_output is not empty before proceeding
if labeled_output:
    # Extract sentences and labels from labeled_output
    sentences = [sentence for _, sentence in labeled_output]
    labels = [label for label, _ in labeled_output]

    # Convert text data into TF-IDF features
    vectorizer = TfidfVectorizer()
    X = vectorizer.fit_transform(sentences)

    # Split data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, labels, test_size=0.15, random_state=42)

    # Train SVM classifier
    svm_classifier = SVC(C=1.0, kernel='linear')  # Using linear kernel for simplicity
    svm_classifier.fit(X_train, y_train)

    # Predict labels for testing data
    y_pred = svm_classifier.predict(X_test)

    # Calculate accuracy
    accuracy = accuracy_score(y_test, y_pred)
    print(f"Accuracy: {accuracy}")
else:
    print("No data to process.")
